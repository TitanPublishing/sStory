// Generated by CoffeeScript 1.6.2
var sStory, sStoryEditor;

sStory = (function() {
  function sStory(story_list) {
    var typeIsArray;

    this.story_list = story_list;
    typeIsArray = Array.isArray || function(value) {
      return {}.toString.call(value) === '[object Array]';
    };
    if (this.story_list === void 0) {
      throw "No story_list defined";
    }
    if (!typeIsArray(this.story_list)) {
      throw "The story_list is not an array";
    }
  }

  sStory.prototype.render = function() {
    var $content, templates, that;

    $content = $('#content');
    $content.html("");
    templates = {};
    $(".section-template").each(function() {
      var templateSource;

      templateSource = $(this).html();
      return templates[$(this).attr('id')] = Handlebars.compile(templateSource);
    });
    _.each(this.story_list, function(section, i) {
      var sectionContent, sectionHtml;

      sectionHtml = templates["section-template-" + section.type](section);
      sectionContent = $("<section id='" + i + "' class='" + section.type + "'></section>").html(sectionHtml);
      return $content.append(sectionContent);
    });
    this.handleWindowResize();
    that = this;
    $(window).on('resize', function() {
      return that.handleWindowResize();
    });
    this.renderMaps();
    this.renderTimelines();
    this.makeNavSectionList();
    return this.story_list;
  };

  sStory.prototype.makeNavSectionList = function() {
    var $navlist;

    $navlist = $("#nav-section-list");
    $navlist.html("");
    return _.each(this.story_list, function(section, i) {
      var $link, $listItem;

      $link = $("<a></a>").attr("href", "#" + i).html(i + 1);
      $listItem = $("<li></li>").html($link);
      return $navlist.append($listItem);
    });
  };

  sStory.prototype.verticalCenterElement = function(el, parEl) {
    var elHeight, pageHeight;

    elHeight = el.innerHeight() / 2;
    pageHeight = parEl.innerHeight() / 2;
    return $(el).css({
      paddingTop: pageHeight - elHeight
    });
  };

  sStory.prototype.verticalCenterPhotoTitles = function() {
    var that;

    that = this;
    $(".photoBigText h2").each(function() {
      return that.verticalCenterElement($(this), $(this).parent());
    });
    return $(".photoCaption h2").each(function() {
      return that.verticalCenterElement($(this), $(this).parent());
    });
  };

  sStory.prototype.handleWindowResize = function() {
    var windowHeight;

    this.verticalCenterPhotoTitles();
    windowHeight = $(window).height();
    $(".photoBigText .photo-background").css({
      minHeight: windowHeight
    });
    return $(".photoCaption .photo-background").css({
      minHeight: windowHeight
    });
  };

  sStory.prototype.renderTimelines = function() {
    var that;

    that = this;
    return $(".verite-timeline").each(function() {
      var spreadsheetAddr, timelineId;

      timelineId = _.uniqueId("timeline_");
      $(this).attr("id", timelineId);
      spreadsheetAddr = $(this).attr("data-spreadsheet-address");
      return $(document).ready(function() {
        return createStoryJS({
          type: 'timeline',
          width: '100%',
          height: '700',
          source: spreadsheetAddr,
          embed_id: timelineId
        });
      });
    });
  };

  sStory.prototype.renderMaps = function() {
    var that;

    that = this;
    return $(".single-location-map").each(function() {
      var address, caption, geoCode, latLon, mapId;

      mapId = _.uniqueId("map_");
      $(this).attr("id", mapId);
      address = $(this).attr("data-address");
      caption = $(this).attr("data-caption");
      latLon = [];
      geoCode = that.geocodeLocationRequest(address);
      return geoCode.done(function(result) {
        var circle, layer, map;

        result = result[0];
        latLon = [result.lat, result.lon];
        map = L.map(mapId, {
          scrollWheelZoom: false
        }).setView(latLon, 14);
        layer = new L.StamenTileLayer("toner-lite");
        map.addLayer(layer);
        return circle = L.circle(latLon, 120, {
          color: 'red',
          fillColor: 'red',
          fillOpacity: 0.5,
          closeOnClick: false
        }).bindPopup(caption, {
          maxWidth: 600,
          maxHeight: 600,
          closeButton: false
        }).addTo(map).openPopup();
      });
    });
  };

  sStory.prototype.geocodeLocationRequest = function(location) {
    var addr, baseUrl, url;

    baseUrl = "http://open.mapquestapi.com/nominatim/v1/search.php?format=json";
    addr = "&q=" + location;
    url = encodeURI(baseUrl + addr + "&addressdetails=1&limit=1");
    return $.ajax({
      url: url,
      type: "GET",
      dataType: "json",
      cache: true
    });
  };

  return sStory;

})();

sStoryEditor = (function() {
  function sStoryEditor(story) {
    this.story = story;
    $("#story-editor").show();
    this.sectionTypes = {
      photo: {
        photoBigText: {
          inputs: ['title', 'photoUrl'],
          mustHave: ['photoUrl']
        },
        photoCaption: {
          inputs: ['title', 'photoUrl', 'caption'],
          mustHave: ['photoUrl', 'caption']
        }
      },
      text: {
        textHtml: {
          inputs: ['title', 'textHtml'],
          mustHave: ['title', 'textHtml']
        }
      },
      video: {
        videoYoutube: {
          inputs: ['embedCode'],
          mustHave: ['embedCode']
        },
        videoVimeo: {
          inputs: ['embedCode'],
          mustHave: ['embedCode']
        }
      },
      sound: {
        soundSoundcloud: {
          inputs: ['embedCode'],
          mustHave: ['embedCode']
        }
      },
      location: {
        locationSinglePlace: {
          inputs: ['address', 'caption', 'photoUrl'],
          mustHave: ['address', 'caption']
        }
      },
      timeline: {
        timelineVerite: {
          inputs: ['title', 'googleSpreadsheet'],
          mustHave: ['googleSpreadsheet']
        },
        timelineStorify: {
          inputs: ['embedCode'],
          mustHave: ['embedCode']
        }
      }
    };
    this.giveSectionsID();
    this.renderSectionList();
    this.renderSectionTypeSelector();
  }

  sStoryEditor.prototype.giveSectionsID = function() {
    var newStory;

    newStory = [];
    _.each(this.story.story_list, function(section) {
      var guid, s4;

      s4 = function() {
        return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
      };
      guid = function() {
        return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();
      };
      section.id = guid();
      console.log(section.id);
      return newStory.push(section);
    });
    return this.story.story_list = newStory;
  };

  sStoryEditor.prototype.renderSectionEditor = function() {
    var $editor, newSectionSubType, newSectionType, templates, that;

    templates = {};
    $(".editor-template").each(function() {
      var templateSource;

      templateSource = $(this).html();
      return templates[$(this).attr('id')] = Handlebars.compile(templateSource);
    });
    newSectionType = $("#new-section-type").val();
    newSectionSubType = $("#sub-section-type").val();
    $editor = $("#editor-inputs");
    $editor.html("");
    that = this;
    _.each(this.sectionTypes[newSectionType][newSectionSubType].inputs, function(input) {
      var $template, mustHave, sectionData;

      sectionData = that.sectionTypes[newSectionType][newSectionSubType];
      mustHave = $.inArray(input, sectionData.mustHave) > -1;
      $template = $(templates['editor-template-' + input]());
      if (mustHave) {
        $template.addClass("must-have");
      }
      return $editor.append($template);
    });
    $("#story-editor #save").on("click", function() {
      return that.exportStoryList();
    });
    document.getElementById('story_file').addEventListener('change', (function() {
      return that.importStoryList(event, that);
    }), false);
    $("#add-section").on("click", function() {
      that.addSection();
      return $("#editor-inputs input").val(" ");
    });
    return $("#importJsonToggle").on("click", function() {
      return $("#story_file").toggle();
    });
  };

  sStoryEditor.prototype.renderSectionList = function() {
    var $content, $sortable, that;

    $content = $('#section-list');
    $content.html("");
    that = this;
    _.each(this.story.story_list, function(section, i) {
      var $listItem, deleteIcon, sectionContent, sectionIcon, sectionMainType;

      sectionIcon = "";
      sectionMainType = "";
      switch (section.type) {
        case "photoBigText":
          sectionMainType = "photo";
          break;
        case "photoCaption":
          sectionMainType = "photo";
          break;
        case "videoYoutube":
          sectionMainType = "video";
          break;
        case "videoVimeo":
          sectionMainType = "video";
          break;
        case "soundSoundcloud":
          sectionMainType = "sound";
          break;
        case "locationSinglePlace":
          sectionMainType = "location";
          break;
        case "timelineVerite":
          sectionMainType = "timeline";
      }
      switch (sectionMainType) {
        case "photo":
          sectionIcon = "<i class=\"icon-camera\"></i>";
          break;
        case "video":
          sectionIcon = "<i class=\"icon-video\"></i>";
          break;
        case "sound":
          sectionIcon = "<i class=\"icon-volume-up\"></i>";
          break;
        case "location":
          sectionIcon = "<i class=\"icon-location-circled\"></i>";
          break;
        case "timeline":
          sectionIcon = "<i class=\"icon-calendar\"></i>";
      }
      deleteIcon = "<i class=\"icon-cancel-squared delete-section\"></i>";
      sectionContent = deleteIcon + sectionIcon + " " + section.id;
      $listItem = $("<li></li>").attr("id", i).attr("data-id", section.id).html(sectionContent);
      if (section.title !== void 0) {
        $listItem.attr("title", section.title);
      }
      $content.append($listItem);
      return $("i.delete-section").on("click", function() {
        return that.deleteSection($(this).parent().attr('data-id'));
      });
    });
    $content.sortable("destroy");
    $sortable = $content.sortable();
    that = this;
    return $sortable.bind('sortupdate', function() {
      var sortableSet, sortedList;

      sortedList = [];
      $(this).children().each(function() {
        return sortedList.push($(this).attr("data-id"));
      });
      that.reorderStoryList(sortedList);
      return sortableSet = true;
    });
  };

  sStoryEditor.prototype.reorderStoryList = function(sortedList) {
    var newStoryList, oldList;

    oldList = this.story.story_list;
    newStoryList = [];
    _.each(sortedList, function(listItemID) {
      var section;

      section = _.find(oldList, function(section) {
        return section.id === listItemID;
      });
      return newStoryList.push(section);
    });
    this.story.story_list = newStoryList;
    return this.updatePage();
  };

  sStoryEditor.prototype.updatePage = function() {
    this.renderSectionList();
    this.story.render();
    return this.story.handleWindowResize();
  };

  sStoryEditor.prototype.renderSectionSubTypeSelector = function(section) {
    var $select, subsections, that;

    if (section === void 0) {
      section = "photo";
    }
    subsections = this.sectionTypes[section];
    $select = $("#sub-section-type");
    $select.html("");
    _.each(_.keys(subsections), function(sectionType) {
      var $option;

      $option = $('<option value="' + sectionType + '">' + sectionType + '</option>');
      return $select.append($option);
    });
    that = this;
    return $select.on("change", function() {
      return that.renderSectionEditor();
    });
  };

  sStoryEditor.prototype.renderSectionTypeSelector = function() {
    var $select, that;

    $select = $("#new-section-type");
    $select.html("");
    _.each(_.keys(this.sectionTypes), function(sectionType) {
      var $option;

      $option = $('<option value="' + sectionType + '">' + sectionType + '</option>');
      return $select.append($option);
    });
    that = this;
    $select.on("change", function() {
      that.renderSectionSubTypeSelector($(this).val());
      return that.renderSectionEditor();
    });
    this.renderSectionSubTypeSelector();
    return this.renderSectionEditor();
  };

  sStoryEditor.prototype.deleteSection = function(delSection) {
    var newlist;

    newlist = _.reject(this.story.story_list, function(section, k) {
      if (section.id === delSection) {
        return true;
      } else {
        return false;
      }
    });
    this.story.story_list = newlist;
    return this.updatePage();
  };

  sStoryEditor.prototype.addSection = function(section) {
    var newSection, newSectionNum, sectionCount;

    sectionCount = +d3.max(_.keys(this.story.story_list));
    if (sectionCount === void 0) {
      sectionCount = 0;
    }
    newSectionNum = sectionCount + 1;
    newSection = {};
    $("#editor-inputs input").each(function(el) {
      if ($(this).val() !== "") {
        return newSection[$(this).attr('id').split("-")[2]] = $(this).val();
      }
    });
    newSection.type = $("#sub-section-type").val();
    this.story.story_list[newSectionNum] = newSection;
    this.giveSectionsID();
    return this.updatePage();
  };

  sStoryEditor.prototype.exportStoryList = function() {
    var blob;

    blob = new Blob([JSON.stringify(this.story.story_list)], {
      type: "application/json;charset=utf-8"
    });
    return saveAs(blob, "sstory.json");
  };

  sStoryEditor.prototype.importStoryList = function(evt, that) {
    var fileJson, files, reader;

    files = evt.target.files;
    fileJson = [];
    reader = new FileReader();
    reader.onload = (function(thefile) {
      return function(e) {
        fileJson = JSON.parse(e.target.result);
        that.story.story_list = fileJson;
        that.story.render();
        that.giveSectionsID();
        that.renderSectionList();
        return $("#story-editor #story_file").hide();
      };
    })(files[0]);
    return reader.readAsBinaryString(files[0]);
  };

  sStoryEditor.prototype.makeTitlesEditable = function() {
    return console.log("make all the titles contentEditable and add some bindings");
  };

  sStoryEditor.prototype.updateSectionTitle = function(sectionID, newtitle) {
    return console.log(sectionID, newtitle);
  };

  return sStoryEditor;

})();
